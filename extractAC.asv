function [ usableAsps ] = extractAC( filtered_run,eps,sigN,upperf,f_s,stopbins )
%% Input
% dir - directory to find Target Data
% filtered_run - matrix containing filtered run from Pond or TREX to be
% converted to a target strength AC
% eps - threshold for useful aspects for classification
% dim - array with the dimensions desired for the output (aspect res, freq
% res)
%% Output
% useableAsps - AC matrix for aspects with meaningful power (absolute sum
% greater than eps
run = double(filtered_run);
len = size(run,2);

ctr = findArcCtr(run,1e-4*max(max(abs(run).^2)));

%% Begin Unpacking 
AC  = abs(fft(run,[],2))';

% Windowing Useable spectral power
binsize = f_s/size(AC,1);
AC      = AC(1:ceil(upperf/binsize),:);

% Setting up smaller data structures for decimated form
aAC = zeros(size(AC,1),stopbins);
% Decimate along aspect if aperture is smaller than number of samples we
% have...
if(stopbins<size(AC,2))
    for i = 1:size(AC,1)
    aAC(i,:) = resample(double(AC(i,:)),stopbins,size(AC,2));
    end
else
    aAC = AC;
end


wid = 30;
if(eps>2)
    aAC = aAC(:,ctr-wid:ctr+wid-1);
else
    % Select enhanced aspects in the in center (the 'norm' ones all have this)
    aAC = aAC(:,sum(abs(aAC),1)>eps);
end

% For each aspect, decimate frequency bins to desired signal length
rAC = zeros(sigN,size(aAC,2));

for i = 1:size(aAC,2)
rAC(:,i) = abs(resample(aAC(:,i),sigN,size(aAC,1)))';
end

usableAsps = normc(rAC);%20*log10(abs(normc(rAC)));
end

function [ctrStop]=findArcCtr(run,thresh)
    ctr = size(run,2);
    for stop = 1:size(run,1)
        firstReturn = find(abs(run(stop,:)).^2>thresh,1,'first');
        if(~isempty(firstReturn))
            if(firstReturn<=ctr)
               ctrStop = stop;
               ctr = firstReturn;
            end
        end
    end
end